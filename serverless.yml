service: algo-scheduler

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
  defaultStage: dev
  profiles:
    dev: dev
    prod: prod

provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  runtime: rust
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:service}-${self:provider.stage}-*
  environment:
    USER_SCHEDULE_TABLE_NAME: ${self:service}-${self:provider.stage}-user-schedule
  apiKeys:
    - ${self:service}-${self:provider.stage}

package:
  individually: true

plugins:
  - serverless-rust
  - serverless-pseudo-parameters

functions:
  get-user-schedules:
    handler: api
    events:
      - http:
          path: /user/{username}/schedules
          method: GET
          private: true
  save-user-schedule:
    handler: api
    events:
      - http:
          path: /user/{username}/schedules
          method: POST
          private: true

resources:
  Resources:
    UserSchedule:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-user-schedule
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 2
